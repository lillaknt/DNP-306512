@page "/"
@using BlazorToDo.Services
@using BlazorToDo.Data
@inject IToDoService ToDoService

<PageTitle>ToDO List</PageTitle>

<div class="border" style="padding: 20px;">
    <h4>New Item</h4>
    <TodoForm OnItemAdded="@UpdateItems"></TodoForm>
</div>

<div class="border" style="padding: 20px; margin-top: 20px;">
<div style="display: flex; flex-direction: column">
    @foreach (var todo in Todos)
    {
        <div class="flex-center" style="margin-bottom: 10px;">
            <div class="@ItemClass(todo)" style="width: 280px;"> @todo.Text</div>
        </div>
        @if (todo.Completed)
        {
            <div style="width: 120px">
                <button class="btn btn-primary" onclick="@(() => UnCompleteItem(todo))">Uncomplete</button>
            </div>
        }
        @if (!todo.Completed)
        {
            <div style="width: 120px">
                <button class="btn btn-primary" onclick="@(() => CompleteItem(todo))">Complete</button>
            </div>
        }
        
        <div>
            <button class="btn-danger" onclick="@(() => DeleteItem(todo))">Delete</button>
        </div>
    }
</div>
</div>

@code
{
    private IList<ToDo> Todos { get; set; } = new List<ToDo>();

    protected override void OnInitialized()
    {
        Todos = ToDoService.GetAll().ToList();
    }

    public string ItemClass(ToDo item)
    {
        return item.Completed ? "item-completed" : "";
    }

    public void UpdateItems()
    {
        Todos = ToDoService.GetAll().ToList();
        StateHasChanged();
    }

    public void DeleteItem(ToDo item)
    {
        ToDoService.Delete(item);
        UpdateItems();
    }
    
    public void CompleteItem(ToDo item)
    {
        ToDoService.Complete(item);
        UpdateItems();

    }

    public void UnCompleteItem(ToDo item)
    {
        ToDoService.UnComplete(item);
        UpdateItems();

    }

    
}
